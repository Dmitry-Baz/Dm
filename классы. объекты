class Cassa:
    summa=25125 # количество денег в кассе
def top_up(self, pokup):
    self.pokup=pokup
pokup+=Cassa.summa
return f"в кассе {pokup}"
def count_1000(self):
    print(Cassa.summa//1000)
def take_away(self, x):
    if x<=self.summa:
        self.summa-=x
else:
    return f"не достаточно денег"
r=Cassa()
print(r.top_up(125))

Или  такой  вариант

```python
class CashRegister:
    def __init__(self, initial_amount):
        self.amount = initial_amount

    def top_up(self, x):
        self.amount += x

    def count_1000(self):
        return self.amount // 1000

    def take_away(self, x):
        if self.amount >= x:
            self.amount -= x
        else:
            raise ValueError("Недостаточно денег в кассе")

# Пример использования класса
cash_register = CashRegister(5000)
print(cash_register.count_1000())  # Выводит 5

cash_register.top_up(3000)
print(cash_register.count_1000())  # Выводит 8

try:
    cash_register.take_away(10000)  # Вызовет ошибку, так как не хватает денег
except ValueError as e:
    print(e)  # Выводит "Недостаточно денег в кассе"
```

В этом коде создается класс `CashRegister` с методами `top_up`, `count_1000` и `take_away`, 
которые пополняют кассу, подсчитывают количество целых тысяч и вычитают деньги из кассы соответственно.


class Turtle:

    def __init__(self, x, y, s):

        self.x = x

        self.y = y

        self.s = s

def go_up(self):

    self.y += self.s

return self.y

def go_down(self):

    self.y -= self.s

return self.y

def go_left(self):

    self.x -= self.s

return self.x

def go_right(self):

    self.x += self.s

return self.y

def evolve(self):

    self.s += 1

return self.s

def degrade(self):

    if self.s <= 0:

        print('s = 0')

return

self.s -= 1

return self.s

def count_moves(self, x2, y2):

    return self.x-x2, self.y- y2

    r=Turtle(5, 15, 26)

print(r.go_up())

print(r.go_down())

print(r.go_left())

print(r.go_right())

print(r.evolve())

print(r.degrade())

print(r.count_moves(12,10))
